doctype html
html
	head
		meta(charset="utf-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		meta(property="og:title" content="XXX的測驗結果")
		meta(property="og:image" content="https://rogeryeeaah.github.io/hm/img/1.jpg")
		title NesswellnessWheel - Know about your self

		script(src="./scripts/v3.2.8/vue.global.prod.js" type="text/javascript" charset="utf-8")
		script(src="./scripts/jquery/jquery.min.js")
		script(src="./scripts/chart/chart.min.js")
		script(src="./scripts/chart/chartjs-plugin-datalabels.js")
		script(src="./scripts/data.js")
		script(src="./scripts/mathjs/math.min.js")
		script(async defer crossorigin="anonymous" src="https://connect.facebook.net/zh_TW/sdk.js#xfbml=1&version=v12.0" nonce="3wIFGc8b")

		link(rel="stylesheet", href="./styles/reset.css")
		link(rel="stylesheet", href="./styles/custom.css")
		
	body.result
		include ./include/header

		#app.results
			.container
				p.name(v-if="this.len === 'en'") {{ 'Hi ' + name }},
				p.name(v-if="this.len === '中'") {{ '嗨 ' + name }},
				.title {{ results.title }}
				div.result-canvas
					//- .avg
					//- 	span 7.5
					canvas#polarChart
				.function
					label.switch.d-none
						input(type="checkbox")
						span.slider.round
					a.fbshare(href="#")
						iframe(src="https://www.facebook.com/plugins/share_button.php?href=https%3A%2F%2Fdevelopers.facebook.com%2Fdocs%2Fplugins%2F&layout=button&size=large&width=68&height=28&appId" width="68" height="28" style="border:none;overflow:hidden" scrolling="no" frameborder="0" allowfullscreen="true" allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share")
					a.download(href="#")
						img(src="./img/icons/download-w.png")
				p.ps {{ results.ps }}
				.card.highest(v-for="(items, index) in this.maxIndex" key="index")
					.img(:style="'background-image: url(./img/icons/' + items + '.png)'")
					span You scored highest on {{ items }} health
				span.stairs(style="background-image: url(./img/stairs.png)")
				.card.lowest(v-for="(items, index) in this.minIndex" key="index")
					span ... and have the most room for improvement in {{ items }} health
					.img(:style="'background-image: url(./img/icons/' + items + '.png)'")

				.avr-score.sp
					.title {{ results.averScore + averScore }}
						.status.style1(v-if="this.averScore >= 0 && this.averScore < 39") Not Well
						.status.style2(v-if="this.averScore >= 39 && this.averScore < 59") Average
						.status.style3(v-if="this.averScore >= 59 && this.averScore <= 79") Pretty Well
						.status.style4(v-if="this.averScore >= 80") Very Well
					.content(v-if="this.averScore >= 0 && this.averScore < 39" v-html="results.averContent.notwell") 
					.content(v-if="this.averScore >= 39 && this.averScore < 59" v-html="results.averContent.average")
					.content(v-if="this.averScore >= 59 && this.averScore <= 79" v-html="results.averContent.prettywell")
					.content(v-if="this.averScore >= 80" v-html="results.averContent.verywell")  

				.avr-score
					.title {{ results.balScore + balScore }}
						.status.style1(v-if="this.balScore > 11") Unbalanced
						.status.style4(v-if="this.balScore <= 11") Well Balanced
					.content(v-if="this.balScore > 11" v-html="results.balContent.Unbalanced") 
					.content(v-if="this.balScore <= 11" v-html="results.balContent.wellbalance") 

				.about
					.title About the ness
						br
						| Wellness Wheel
					.content The ness Wellness Wheel is a self assessment tool that allows you to visualize how balanced your life is. Through reflection on each of the eight dimensions of wellness (social, physical, emotional, occupational, spiritual, intellectual, environmental, and financial), we can use this tool to periodically evaluate how our wellbeing has changed over time and is impacting our goals and life.
				
				ul.dimensions
					list(:list="this.category")

				.balance
					.title Finding balance
					.content If one spoke (dimension) becomes the primary focus, and the others are neglected, our Wheel of Wellness feels out of balance, and so too, our lives. While we don't have to aim for high scores in each dimensions, we can aspire to create a wheel that is smooth and consistent, rather than sharp and jagged with big differences in highs and lows.
						br
						| Remember that nobody is perfect, but we can aim to live a well-rounded, balanced life, by identifying the areas in which you are thriving, as well as paying attention to the areas in need of improvement.

				.other
					.title(v-html="results.resources.title")
					.content {{ results.resources.content }}
					ul.sp
						a(v-for="(items, index) in results.TBC" key="index" :href="items.href" target="_blank")
							.title {{ items.title }}
							.img(:style="'background-image: url(' + items.img + ')'")

				include ./include/inline_footer

			//- div.socialShare
			//- 	div.sbutton.facebook-cresta-share.cresta-float-shadow#shareF
			//- 		a(rel="nofollow" href="#" data-name="Partager sur Facebook" onclick="window.open('https://www.facebook.com/sharer/sharer.php?u=' + encodeURIComponent(document.URL) + '&t=' + encodeURIComponent(document.URL),'targetWindow','toolbar=no,loc');return false;") facebook
			//- 			i.cs.c-icon-cresta-facebook

		script#list(type="text/x-template")
			li(v-for="(items, i) in list" @click="openNot(i)" :key="i" :class="{active: i === activeItem}")
				p
					img(:src="items.logo", alt="")
					| {{ items.title }}
				.arrow(:style="i === activeItem?'background-image: url(./img/icons/down-arrow.png)':'background-image: url(./img/icons/up-arrow.png)'")
				transition(name="slideDown")
					span(v-if="i === activeItem? show:!show") {{ items.info }}

		script.
			const app = Vue.createApp({
				data() {
					return {
						category: [],
						results: [],
						name: localStorage.name,
						len: localStorage.len,
						emo: localStorage.emo,
						phy: localStorage.phy,
						spi: localStorage.spi,
						int: localStorage.int,
						soc: localStorage.soc,
						env: localStorage.env,
						occ: localStorage.occ,
						fin: localStorage.fin,
						maxIndex: [],
						minIndex: []

					}
				},
				created: function() {
					this.onCateCatch();
				},
				mounted: function() {
					var ctx = document.getElementById("polarChart").getContext("2d");
					var data = {
						datasets: [{
							backgroundColor: [
								"#d2f9f4",
								"#d3f9d4",
								"#eef8d4",
								"#fbead6",
								"#ffcddd",
								"#f4e2f0",
								"#e9d3f9",
								"#bbebf7",
							],
							data: [this.int, this.soc, this.env, this.occ, this.fin, this.spi, this.phy, this.emo],
							borderWidth: 1,
							borderColor: '#f2f2f2',
							label: 'My dataset'
						}],
						labels: ["Intellectual", "Social", "Environmental", "Occupational", "Financial", "Spiritual", "physical", "Emotional"]
					}

					var options = {
						plugins: {
							legend: {
								display: false,
							}
						},
						layout: {
							padding: 50,
						},
						scales: {
							r: {
								min: 0,
								max: 10,
								angleLines: {
									max: 10,
									display: true,
									center: true,
									color: '#d1d1d1'
								},
								ticks: {
									display: false,
									stepSize: 1,
									color: 'black',
									backdropColor: 'transparent',
									z: 2,
								},
								grid: {
									color: '#d1d1d1',
									z: 2
								}
							}
						},
						animation: {
							duration: 500,
							easing: "easeOutQuart",
							onComplete: function () {
								let ctx = this.ctx;
								ctx.font = '8px "Montserrat"';
								ctx.textAlign = 'center';
								ctx.textBaseline = 'bottom';
				
								console.log('!!!!');
								console.log(this.getDatasetMeta(0));
								let _meta = this.getDatasetMeta(0);
								this.data.datasets.forEach(function (dataset) {

									for (let i = 0; i < dataset.data.length; i++) {
										let model = _meta.data[i],
											mid_radius = model.innerRadius + (110 - model.innerRadius)/2 + 50,
											start_angle = model.startAngle,
											end_angle = model.endAngle,
											mid_angle = start_angle + (end_angle - start_angle)/2;
										console.log('=======' + i + '=======');
										console.log('model.innerRadius :' + model.innerRadius);
										console.log('model.outerRadius :' + model.outerRadius);
										console.log('model.startAngle :' + model.startAngle);
										console.log('model.endAngle :' + model.endAngle);
										let x = mid_radius * Math.cos(mid_angle);
										let y = mid_radius * Math.sin(mid_angle) + 8;
										let t = dataset.data[i];
										ctx.fillText(t, model.x + x, model.y + y);
									}
								});
							}
						}
					};

					var myChart = new Chart(ctx, {
						type: 'polarArea',
						data: data,
						options: options
					});

					var results = [this.emo, this.phy, this.spi, this.int, this.soc, this.env, this.occ, this.fin];
					var maxIndex = [];
					var minIndex = [];
					var mMax = Math.max(...results);
					var mMin = Math.min(...results);

					results.forEach(function(element, i) {
						var cate;
						if(i == 0) {
							cate = 'Emotional';
						} else if(i == 1) {
							cate = 'Physical';
						} else if(i == 2) {
							cate = 'Spiritual';
						} else if(i == 3) {
							cate = 'Intellectual';
						} else if(i == 4) {
							cate = 'Social';
						} else if(i == 5) {
							cate = 'Environmental';
						} else if(i == 6) {
							cate = 'Occupational';
						} else if(i == 7) {
							cate = 'Financial';
						} else {
							console.log('error')
						}

						if (element == mMax) {
							maxIndex.push(cate);
						}

						if (element == mMin) {
							minIndex.push(cate);
						}
					});

					this.maxIndex = maxIndex;
					this.minIndex = minIndex;

					console.log(results, this.maxIndex, this.minIndex)
				},
				methods: {
					onCateCatch: function() {
						if(this.len === 'en') {
							this.category = pageData.en.info.category;
							this.results = pageData.en.results;
						} else if(this.len === '中') {
							this.category = pageData.ch.info.category;
							this.results = pageData.ch.results;
						} else {
							this.category = pageData.en.info.category;
							this.results = pageData.en.results;
						}
					}
				},
				computed: {
					averScore() {
						var emoH = parseInt(this.emo*10),
							phyH = parseInt(this.phy*10),
							spiH = parseInt(this.spi*10),
							intH = parseInt(this.int*10),
							socH = parseInt(this.soc*10),
							envH = parseInt(this.env*10),
							occH = parseInt(this.occ*10),
							finH = parseInt(this.fin*10),
							aver = (emoH + phyH + spiH + intH + socH + envH + occH + finH);
						return aver/8
					},
					balScore() {
						var result = math.std([this.emo, this.phy, this.spi, this.int, this.soc, this.env, this.occ, this.fin])*10
						return result.toFixed(2);
					}
				}
			});
			
			app.component('list', {
				data() {
					return {
						activeItem: '',
						show: true
					}
				},
				template: '#list',
				props:['list'],
				methods: {
					openNot: function(i) {
						if(this.activeItem != i) {
							this.activeItem = i;
						} else {
							this.activeItem = !this.activeItem;
						}
					}
				}
			});

			app.mount('#app');