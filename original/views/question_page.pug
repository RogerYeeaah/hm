doctype html

html
	head
		meta(charset="utf-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		meta(property="og:title" content="XXX的測驗結果")
		meta(property="og:image" content="https://rogeryeeaah.github.io/hm/img/1.jpg")
		title NesswellnessWheel - Know about your self

		script(src="scripts/v3.2.8/vue.global.prod.js" type="text/javascript" charset="utf-8")
		script(src="./scripts/jquery/jquery.min.js")
		script(src="./scripts/swiper/swiper-bundle.min.js")
		script(src="./scripts/data.js")

		link(rel="stylesheet", href="./styles/reset.css")
		link(rel="stylesheet", href="./styles/swiper/swiper.min.css")
		link(rel="stylesheet", href="./styles/custom.css")

	body.cate-01
		#app.question-page
			.container
				.function-box
					.swiper-pagination
					span.des Completed
				.swiper.mySwiper
					.swiper-wrapper
						qs(:qs="this")

					.process-box
						span.current {{ curQ }}
						span / 
						span.total {{ totalCount }}
						span  questions answered
					.swiper-next Next
					.swiper-prev Back

				.submit-box(:class="")
					button#submit(:class="curQ === totalCount ? '':'disabled'" type="submit" value="Submit" @click="cul(result)") Submit

		include ./include/footer
		
		script#qs(type="text/x-template")
			.swiper-slide(:class="index === qs.questions.length - 1 ? 'last-one':''" v-for="(items, index) in qs.questions" :key="index")
				.scroll-box
					qc(:qc="qs.questions[index]" :qcs="qs")
		
		script#qc(type="text/x-template")
			.q-card(v-for="(items, index) in qc" :key="index")
				.question {{ items.title }}
				.option-box
					p Rarely
					sp(:sp="items" :qc="qc" :qcc="qcs" @childEvent="parentEvent")
					p Always

		script#sp(type="text/x-template")
			.box(:class="activeClass == index ? 'option active':'option'" v-for="index in 7" @click="onAnswerClick(index)")
				label(:for="sp.categoryId + '-' + sp.questionId + '-' + index")
				input(:id="sp.categoryId + '-' + sp.questionId + '-' + index" type="radio" :value="((index*10000)*(sp.percentage*10000))/100000000" :key="index" :name="sp.categoryId")

		script.
			const app = Vue.createApp({
				data() {
					return {
						questions: [],
						result: [],
						curQ: 0,
						totalQ: 0
					}
				},
				created: function() {
					this.onContentCatch();
					this.onHeaderCatch();
				},
				mounted: function() {
					var swiper = new Swiper(".mySwiper", {
						slidePerView: '1',
						pagination: {
							el: ".swiper-pagination",
							type: "progressbar",
						},
						navigation: {
							nextEl: ".swiper-next",
							prevEl: ".swiper-prev",
						},
					});

					swiper.on('slideChangeTransitionEnd', function(){
						var num = swiper.activeIndex+1;
						$('body').attr('class', 'cate-0' + num);
						if($('.swiper-slide-active').hasClass('last-one')) {
							$('.submit-box').addClass('show');
						} else {
							$('.submit-box').removeClass('show');
						}
					});
				},
				methods: {
					onContentCatch: function() {
						this.questions = pageData.en.questions;
					},
					onHeaderCatch: function() {
						this.menu = pageData.en.menu;
					},
					cul: function(e) {
						var active = window.document.querySelectorAll('.active'),
							actives = window.document.querySelectorAll('.active').length,
							e = [[],[],[],[],[],[],[],[]],
							index;
						
						for (i = 0; i < actives; i++) {
							index = active[i].querySelector('input').name - 1;
							
							console.log(index, active[i].querySelector('input').value);
							e[index].push(active[i].querySelector('input').value);
						}
						recordCount(e);
					},
					recordCount: function(e) {
					}
				},
				computed: {
					totalCount: function() {
						var r = 0;
						this.questions.forEach(function(d){
							r += d.length; 
						})
						return r;
					}
				}
			});
			
			app.component('qs', {
				template: '#qs',
				props:['qs']
			});

			app.component('qc', {
				template: '#qc',
				props:['qc', 'qcs']
			});

			app.component('sp', {
				template: '#sp',
				data: function () {
					return {
						activeClass: -1
					}
				},
				props:['sp', 'qc', 'qcc'],
				methods: {
					onAnswerClick: function(index){
						this.activeClass = index;
						this.qcc.curQ = window.document.querySelectorAll('.active').length;
					},
					add: function(){
						this.$emit("childEvent", this.age);
					}
				}
			});

			app.mount('#app');