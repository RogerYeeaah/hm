doctype html
html
	head
		meta(charset="utf-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		meta(property="fb:app_id" content="334437811929428")
		meta(name="og:url" content="http://uat.erduo.tw/wellness_wheel/results.php")
		meta(name="og:image" content="http://uat.erduo.tw/wellness_wheel/resultimg/<?php echo $_GET['img']; ?>.png")
		meta(name="og:description" content="The ness Wellness Wheel is a great way to view your life from a bird's eye perspective and identify where you are at this moment in time while also discovering where you want it to be.")
		meta(name="og:title" content="nesswellnesswheel")
		meta(name="og:site_name" content="nesswellnesswheel")
		meta(name="og:type" content="website")
		link(rel="icon" href="img/icons/favicon.ico")
		title NesswellnessWheel

		script(src="./scripts/v3.2.8/vue.global.prod.js" type="text/javascript" charset="utf-8")
		script(src="./scripts/jquery/jquery.min.js")
		script(src="./scripts/chart/chart.min.js")
		script(src="./scripts/chart/chartjs-plugin-datalabels.js")
		script(src="./scripts/data.js")
		script(src="./scripts/mathjs/math.min.js")
		script(src="./scripts/html2canvas/html2canvas.min.js")
		
		link(rel="stylesheet", href="./styles/reset.css")
		link(rel="stylesheet", href="./styles/custom.css")
		
	body.result
		include ./include/header

		#app.results
			.container
				p.name(v-if="this.len === 'en'") {{ 'Hi ' + name }},
				p.name(v-if="this.len === '中'") {{ '嗨 ' + name }},
				.title {{ results.title }}
				div.result-canvas
					canvas#polarChart
				.function
					label.switch(for="checkbox")
						input(type="checkbox" id="checkbox" v-model="check" @click="chartSwitch(check)")
						span.slider.round
					a.fbshare(href="javascript:void(0);" onclick="saveImg()")
						img(src="./img/icons/facebook-w.png")
					a.download(href="javascript:void(0)" @click="downloadImg()")
						img(src="./img/icons/download-w.png")
				.instagram
					img(src="./img/icons/instagram-c.png" alt="")
					.detail
						p Tag us on your Wellness Wheel
						p @
							a(href="https://www.instagram.com/nesswellnesswheel") nesswellnesswheel
							| @
							a(href="https://www.instagram.com/ness.wellness") ness.wellness
				p.ps {{ results.ps }}
				.card.highest(v-for="(items, index) in this.maxIndex" key="index")
					.img(:style="'background-image: url(./img/icons/' + items + '.png)'")
					span You scored highest on {{ items }} health
				span.stairs(style="background-image: url(./img/stairs.png)")
				.card.lowest(v-for="(items, index) in this.minIndex" key="index")
					span ... and have the most room for improvement in {{ items }} health
					.img(:style="'background-image: url(./img/icons/' + items + '.png)'")

				.avr-score.sp
					.title {{ results.averScore + averScore }}
						.status.style1(v-if="this.averScore >= 0 && this.averScore < 39") {{ results.averRange.D }}
						.status.style2(v-if="this.averScore >= 39 && this.averScore < 59") {{ results.averRange.C }}
						.status.style3(v-if="this.averScore >= 59 && this.averScore <= 79") {{ results.averRange.B }}
						.status.style4(v-if="this.averScore >= 80") {{ results.averRange.A }}
					.content(v-if="this.averScore >= 0 && this.averScore < 39" v-html="results.averContent.notwell") 
					.content(v-if="this.averScore >= 39 && this.averScore < 59" v-html="results.averContent.average")
					.content(v-if="this.averScore >= 59 && this.averScore <= 79" v-html="results.averContent.prettywell")
					.content(v-if="this.averScore >= 80" v-html="results.averContent.verywell")

				.avr-score
					.title {{ results.balScore + balScore }}
						.status.style1(v-if="this.balScore > 11") {{ results.balRange.B }}
						.status.style4(v-if="this.balScore <= 11") {{ results.balRange.A }}
					.content(v-if="this.balScore > 11" v-html="results.balContent.Unbalanced") 
					.content(v-if="this.balScore <= 11" v-html="results.balContent.wellbalance") 

				.about(:id="results.about.anchor")
					.title(v-html="results.about.title")
					.content(v-html="results.about.content")
				
				ul.dimensions
					list(:list="this.category")

				.balance
					.title(v-html="results.balance.title")
					.content(v-html="results.balance.content")

				.other(:id="results.resources.anchor")
					.title(v-html="results.resources.title")
					.content {{ results.resources.content }}
					ul.sp
						a(v-for="(items, index) in results.TBC" key="index" :href="items.href" target="_blank")
							.title {{ items.title }}
							.img(:style="'background-image: url(' + items.img + ')'")

				.cut-area#cut-area
					p.name(v-if="this.len === 'en'") {{ 'Hi ' + name }},
					p.name(v-if="this.len === '中'") {{ '嗨 ' + name }},
					.title {{ results.title }}

					div.result-canvas
						canvas#polarChartCutArea

					.instagram
						img(src="./img/icons/instagram-c.png" alt="")
						.detail
							p Tag us on your Wellness Wheel
							p @
								a(href="https://www.instagram.com/nesswellnesswheel") nesswellnesswheel
								| @
								a(href="https://www.instagram.com/ness.wellness") ness.wellness

				include ./include/inline_footer

		script#list(type="text/x-template")
			li(v-for="(items, i) in list" @click="openNot(i)" :key="i" :class="{active: i === activeItem}")
				p
					img(:src="items.logo", alt="")
					| {{ items.title }}
				.arrow(:style="i === activeItem?'background-image: url(./img/icons/up-arrow.png)':'background-image: url(./img/icons/down-arrow.png)'")
				transition(name="slideDown")
					span(v-if="i === activeItem? show:!show") {{ items.info }}

		script.
			const app = Vue.createApp({
				data() {
					return {
						category: [],
						results: [],
						name: localStorage.name,
						len: localStorage.len,
						emo: localStorage.emo,
						phy: localStorage.phy,
						spi: localStorage.spi,
						int: localStorage.int,
						soc: localStorage.soc,
						env: localStorage.env,
						occ: localStorage.occ,
						fin: localStorage.fin,
						maxIndex: [],
						minIndex: [],
						check: localStorage.check
					}
				},
				created: function() {
					this.onCateCatch();
					this.chartCheck();
				},
				mounted: function() {
					var self = this;
					var ctx = document.getElementById("polarChart").getContext("2d");
					var	ctxCutArea = document.getElementById("polarChartCutArea").getContext("2d");

					var data = {
						datasets: [{
							backgroundColor: [
								"#d2f9f4",
								"#d3f9d4",
								"#eef8d4",
								"#fbead6",
								"#ffcddd",
								"#f4e2f0",
								"#e9d3f9",
								"#bbebf7",
							],
							data: [this.int, this.soc, this.env, this.occ, this.fin, this.spi, this.phy, this.emo],
							borderWidth: 1,
							borderColor: '#f2f2f2',
							label: 'My dataset'
						}],
						labels: ["Intellectual", "Social", "Environmental", "Occupational", "Financial", "Spiritual", "physical", "Emotional"]
					}

					var options = {
						plugins: {
							legend: {
								display: false,
							}
						},
						layout: {
							padding: 50,
						},
						scales: {
							r: {
								min: 0,
								max: 10,
								angleLines: {
									max: 10,
									display: true,
									center: true,
									color: '#d1d1d1'
								},
								ticks: {
									display: false,
									stepSize: 1,
									color: 'black',
									backdropColor: 'transparent',
									z: 2,
								},
								grid: {
									color: '#d1d1d1',
									z: 2
								}
							}
						},
						animation: {
							duration: 500,
							easing: "easeOutQuart",
							onComplete: function () {
								let ctx = this.ctx;

								ctx.font = '8px "Montserrat"';
								ctx.textAlign = 'center';
								ctx.textBaseline = 'bottom';
				
								//- console.log('!!!!');
								//- console.log(this.getDatasetMeta(0));
								let _meta = this.getDatasetMeta(0);
								if(localStorage.check === 'true') {
									let ctx = this.ctx;
									ctx.font = '8px "Montserrat"';
									ctx.textAlign = 'center';
									ctx.textBaseline = 'bottom';
					
									//- console.log('!!!!');
									//- console.log(this.getDatasetMeta(0));
									let _meta = this.getDatasetMeta(0);
									this.data.datasets.forEach(function (dataset) {

										for (let i = 0; i < dataset.data.length; i++) {
											let model = _meta.data[i],
												mid_radius = model.innerRadius + (110 - model.innerRadius)/2 + 50,
												start_angle = model.startAngle,
												end_angle = model.endAngle,
												mid_angle = start_angle + (end_angle - start_angle)/2;
											//- console.log('=======' + i + '=======');
											//- console.log('model.innerRadius :' + model.innerRadius);
											//- console.log('model.outerRadius :' + model.outerRadius);
											//- console.log('model.startAngle :' + model.startAngle);
											//- console.log('model.endAngle :' + model.endAngle);
											let x = mid_radius * Math.cos(mid_angle);
											let y = mid_radius * Math.sin(mid_angle) + 8;
											let t = dataset.data[i];
											ctx.fillText(t, model.x + x, model.y + y);
										}
									});
								}
							}
						}
					};

					var myChart = new Chart(ctx, {
						type: 'polarArea',
						data: data,
						options: options
					});

					var myChart = new Chart(ctxCutArea, {
						type: 'polarArea',
						data: data,
						options: options
					})

					var results = [this.emo, this.phy, this.spi, this.int, this.soc, this.env, this.occ, this.fin];
					var maxIndex = [];
					var minIndex = [];
					var mMax = Math.max(...results);
					var mMin = Math.min(...results);

					results.forEach(function(element, i) {
						var cate;
						if(i == 0) {
							cate = 'Emotional';
						} else if(i == 1) {
							cate = 'Physical';
						} else if(i == 2) {
							cate = 'Spiritual';
						} else if(i == 3) {
							cate = 'Intellectual';
						} else if(i == 4) {
							cate = 'Social';
						} else if(i == 5) {
							cate = 'Environmental';
						} else if(i == 6) {
							cate = 'Occupational';
						} else if(i == 7) {
							cate = 'Financial';
						} else {
							console.log('error')
						}

						if (element == mMax) {
							maxIndex.push(cate);
						}

						if (element == mMin) {
							minIndex.push(cate);
						}
					});

					this.maxIndex = maxIndex;
					this.minIndex = minIndex;
				},
				methods: {
					onCateCatch: function() {
						if(this.len === 'en') {
							this.category = pageData.en.info.category;
							this.results = pageData.en.results;
						} else if(this.len === '中') {
							this.category = pageData.ch.info.category;
							this.results = pageData.ch.results;
						} else {
							this.category = pageData.en.info.category;
							this.results = pageData.en.results;
						}
					},
					chartCheck: function() {
						if(localStorage.check === 'false') {
							this.check = false;
						} else if (localStorage.check === 'true') {
							this.check = true;
						} else {
							this.check = true;
							localStorage.check = this.check;
						}
					},
					chartSwitch: function() {
						this.check = !this.check;
						localStorage.check = this.check;
						location. reload();
					},
					downloadImg: function() {
						html2canvas(document.getElementById('cut-area')).then(function(canvas) {
							// document.body.appendChild(canvas);
							console.log('123')
							var dataUrl = canvas.toDataURL("image/png");
							// console.log('dataUrl:' + dataUrl);
							// saveImg(dataUrl)
							var downloadUrl = dataUrl.replace("image/png","image/octet-stream");//圖片地址
							var a = document.createElement("a"); //Create <a>
							a.href = downloadUrl; //Image Base64 Goes here
							a.download = Date.now() + ".png"; //File name Here
							a.click(); 
						});
					} 
				},
				computed: {
					averScore() {
						var emoH = parseInt(this.emo*10),
							phyH = parseInt(this.phy*10),
							spiH = parseInt(this.spi*10),
							intH = parseInt(this.int*10),
							socH = parseInt(this.soc*10),
							envH = parseInt(this.env*10),
							occH = parseInt(this.occ*10),
							finH = parseInt(this.fin*10),
							aver = (emoH + phyH + spiH + intH + socH + envH + occH + finH);
						return aver/8
					},
					balScore() {
						var result = math.std([this.emo, this.phy, this.spi, this.int, this.soc, this.env, this.occ, this.fin])*10
						return result.toFixed(2);
					}
				}
			});
			
			app.component('list', {
				data() {
					return {
						activeItem: '',
						show: true
					}
				},
				template: '#list',
				props:['list'],
				methods: {
					openNot: function(i) {
						if(this.activeItem != i) {
							this.activeItem = i;
						} else {
							this.activeItem = !this.activeItem;
						}
					}
				}
			});

			app.mount('#app');

			function postToShare(fileName) {
				// calling the API ...
				var uri = 'http://uat.erduo.tw/wellness_wheel/results.php?img=' + fileName;
				console.log(uri);
				$.ajax({ 
					type: "GET", 
					url: uri,
				});
				var obj = {
					method: 'share',
					href: uri,
					hashtag: "#nesswellnesswheel"    
				};
				FB.ui(obj);
			}

			function saveImg(){
				html2canvas(document.getElementById('cut-area')).then(function(canvas) {
					// document.body.appendChild(canvas);
					var dataUrl = canvas.toDataURL("image/png");
					// console.log('dataUrl:' + dataUrl);
					$.ajax({ 
						type: "POST", 
						url: 'saveImg.php',
						dataType: 'text',
						data: {
							img : dataUrl
						},
						async: false,
						success(data){
						console.log(data);
						postToShare(data);
						}
					});
				});
				
			}