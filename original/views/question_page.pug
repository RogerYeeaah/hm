doctype html

html
	head
		meta(charset="utf-8")
		meta(name="viewport" content="width=device-width, initial-scale=1.0")
		meta(property="fb:app_id" content="334437811929428")
		meta(name="og:url" content="http://uat.erduo.tw/wellness_wheel/index.html")
		meta(name="og:image" content="./img/siteShare.png")
		meta(name="og:description" content="The ness Wellness Wheel is a great way to view your life from a bird's eye perspective and identify where you are at this moment in time while also discovering where you want it to be.")
		meta(name="og:title" content="nesswellnesswheel")
		meta(name="og:site_name" content="nesswellnesswheel")
		meta(name="og:type" content="website")
		link(rel="icon" href="img/icons/favicon.ico")
		title NesswellnessWheel

		script(src="scripts/v3.2.8/vue.global.prod.js" type="text/javascript" charset="utf-8")
		script(src="./scripts/jquery/jquery.min.js")
		script(src="./scripts/swiper/swiper-bundle.min.js")
		script(src="./scripts/data.js")
		script(src="./scripts/mathjs/math.min.js")

		link(rel="stylesheet", href="./styles/reset.css")
		link(rel="stylesheet", href="./styles/swiper/swiper.min.css")
		link(rel="stylesheet", href="./styles/custom.css")

	body.cate-01
		#app.question-page
			.container
				.function-box
					.swiper-pagination
					span.des Completed
				.swiper.mySwiper
					.swiper-wrapper
						qs(:qs="this" @updatequestion="updateQ")

					.process-box
						span.current {{ curQ }}
						span / 
						span.total {{ totalCount }}
						span  questions answered
					.swiper-next Next
					.swiper-prev Back

				.submit-box
					button#submit(:class="curQ === totalCount ? '':'disabled'" type="submit" value="Submit" @click="cul(result)") Submit

		include ./include/footer
		
		script#qs(type="text/x-template")
			.swiper-slide(:class="index === qs.questions.length - 1 ? 'last-one':''" v-for="(items, index) in qs.questions" :key="index" :id="'page' + index")
				.scroll-box
					qc(:qc="qs.questions[index]" :qcs="qs" :page="index+1" @updatequestion="updateQ")
		
		script#qc(type="text/x-template")
			.q-card(v-for="(items, index) in qc" :key="index" :id="'anchor-' + page + '-' + index" :name="'anchor-' + page + '-' + index")
				.question {{ items.title }}
				.option-box
					p(v-show="qcs.len === 'en'") Rarely
					p(v-show="qcs.len === '中'") 不常
					sp(:sp="items" :qc="qc" :qcc="qcs" :sPage="page" :qIndex="index+1" @childEvent="parentEvent" @updatequestion="updateQ")
					p.right(v-show="qcs.len === 'en'") Always
					p.right(v-show="qcs.len === '中'") 很常

		script#sp(type="text/x-template")
			a.box(:class="activeClass == index ? 'option active':'option'" v-for="index in 7")
				label(:for="sp.categoryId + '-' + sp.questionId + '-' + index" @click="onAnswerClick(index, qIndex, sPage)")
				input(:id="sp.categoryId + '-' + sp.questionId + '-' + index" :key="index" type="radio" :data-cate="sp.categoryId" :data-percentage="sp.percentage" :data-option="index" :name="sp.categoryId+ '-' + sp.questionId")

		script.
			const app = Vue.createApp({
				data() {
					return {
						questions: [],
						result: [],
						curQ: 0,
						totalQ: 40,
						len: localStorage.len
					}
				},
				created: function() {
					this.onContentCatch();
				},
				mounted: function() {
					var self = this;

					var swiper = new Swiper(".mySwiper", {
						slidePerView: '1',
						pagination: {
							el: ".swiper-pagination",
							type: "progressbar",
						},
						navigation: {
							nextEl: ".swiper-next",
							prevEl: ".swiper-prev",
						},
						allowTouchMove: false,
					});

					swiper.on('slideChangeTransitionEnd', function(){
						var num = swiper.activeIndex+1;
						$('body').attr('class', 'cate-0' + num);
						if($('.swiper-slide-active').hasClass('last-one')) {
							$('.submit-box').addClass('show');
						} else {
							$('.submit-box').removeClass('show');
						}
					});

					$('#submit').on('click', function() {
						if(self.curQ != self.totalQ && localStorage.len === 'en') {
							alert('There are still unfilled questions');
						} else if(self.curQ != self.totalQ && localStorage.len === '中') {
							alert('尚有題目未完成');
						} else {
							window.location.href = './results.php';
						}
					})
				},
				methods: {
					onContentCatch: function() {
						if(this.len === 'en') {
							this.questions = pageData.en.questions;
						} else if(this.len === '中') {
							this.questions = pageData.ch.questions;
						} else {
							this.questions = pageData.en.questions;
						}
					},
					cul: function(e) {
						var active = window.document.querySelectorAll('.active'),
							actives = window.document.querySelectorAll('.active').length,
							emo = 0,
							phy = 0,
							spi = 0,
							int = 0,
							soc = 0,
							env = 0,
							occ = 0,
							fin = 0,
							index;
						
						for (i = 0; i < actives; i++) {
							var input = active[i].querySelector('input'),
								tPer = input.dataset.percentage,
								tOption = input.dataset.option * 10 / 7,
								tScore = mulFloat(tPer, tOption);

							if(input.dataset.cate === '1') {
								emo += tScore;
							} else if (input.dataset.cate === '2') {
								phy += tScore;
							} else if (input.dataset.cate === '3') {
								spi += tScore;
							} else if (input.dataset.cate === '4') {
								int += tScore;
							} else if (input.dataset.cate === '5') {
								soc += tScore;
							} else if (input.dataset.cate === '6') {
								env += tScore;
							} else if (input.dataset.cate === '7') {
								occ += tScore;
							} else if (input.dataset.cate === '8') {
								fin += tScore;
							}
						}
						localStorage.emo = emo = emo.toFixed(2);
						localStorage.phy = phy = phy.toFixed(2);
						localStorage.spi = spi = spi.toFixed(2);
						localStorage.int = int = int.toFixed(2);
						localStorage.soc = soc = soc.toFixed(2);
						localStorage.env = env = env.toFixed(2);
						localStorage.occ = occ = occ.toFixed(2);
						localStorage.fin = fin = fin.toFixed(2);
					
						console.log('all cate:', [emo, phy, spi, int, soc, env, occ, fin] ,'標準差 : ', math.std([emo, phy, spi, int, soc, env, occ, fin]).toFixed(5));
					},
					updateQ: function(count){            
						console.log('parent-top');
						this.curQ += count;
					}
				},
				computed: {
					totalCount: function() {
						var r = 0;
						this.questions.forEach(function(d){
							r += d.length;
						})
						return r;
					}
				}
			});
			
			app.component('qs', {
				template: '#qs',
				props:['qs'],
				methods: {          
					updateQ: function(){            
						console.log('parent-qs');
						this.$emit('updatequestion', 1);
					}
				}
			});

			app.component('qc', {
				template: '#qc',
				data: function () {
					return {
						activeClass: false,
						active: ''
					}
				},
				props:['qc', 'qcs', 'page'],
				methods: {          
					updateQ: function(){
						console.log('parent-qc');
						this.$emit('updatequestion', 1);
					}
				}
			});

			app.component('sp', {
				template: '#sp',
				data: function () {
					return {
						activeClass: -1
					}
				},
				props:['sp', 'qc', 'qcc', 'qIndex', 'sPage'],
				methods: {
					onAnswerClick: function(index, qIndex, sPage){
						this.activeClass = index;

						rQIndex = qIndex - 1;
						rSpage = sPage - 1;
						var thisEle = 'anchor-' + sPage + '-' + rQIndex;
						var thisEleH = document.getElementById(thisEle).offsetHeight;
						var hrefLink = '#anchor-' + sPage + '-' + qIndex;
						var firstPosition = $(".swiper-slide[id=page" + rSpage + "] .scroll-box").scrollTop() + 20;

						
						if(document.getElementById(thisEle).getElementsByClassName('active').length < 1){              
							this.$emit('updatequestion', 1);
						}
						console.log(firstPosition);

						$(".swiper-slide[id=page" + rSpage + "] .scroll-box").animate(
							{
								scrollTop: firstPosition + thisEleH + 20
							}, 300
						);
					},
					add: function() {
						this.$emit("childEvent", this.age);
					}
				}
			});

			app.mount('#app');